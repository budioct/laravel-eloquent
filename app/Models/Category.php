<?php

namespace App\Models;

use App\Models\Scopes\IsActiveScope;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Relations\HasMany;
use Illuminate\Database\Eloquent\Relations\HasManyThrough;
use Illuminate\Database\Eloquent\Relations\HasOne;

class Category extends Model
{
    /**
     * project laravel saat ini ver 9.x.x
     *
     * Model
     * ● Model adalah representasi dari Tabel di database
     * ● Model biasanya dibuat di folder app\Models
     * ● Dan Model adalah class turunan dari Illuminate\Database\Eloquent\Model
     * ● https://laravel.com/api/10.x/Illuminate/Database/Eloquent/Model.html
     *
     * Membuat Model
     * ● Kita tidak perlu membuat Model secara manual, kita bisa gunakan file artisan untuk membuat model
     * ● php artisan make:model NamaModel
     *   Membuat Model dengan Pendukungnya
     * ● Kadang, saat membuat Model, kita sering juga membuat fitur pendukung lainnya, seperti database
     *   migration atau database seeding
     * ● Kita tidak perlu melakukannya secara manual satu per satu, kita bisa sebutkan ketika membuat
     *   Model, sehingga otomatis akan dibuatkan Migrations dan Seeding nya
     * ● --migrations / -m ...untuk menambahkan Migrations
     * ● --seed / -s ...untuk menambahkan Seeder
     * note:
     * perintah laravel ver 10
     * ❯ php artisan make:model Category -migration --seed
     * perintah laravel ver 9
     * ❯ php artisan make:model Category -m -s
     *
     * Model Attributes
     * ● Setelah membuat Model, kita harus beri tahu informasi tentang schema tabel yang digunakan oleh
     *   Model
     * ● Kita bisa override attributes yang terdapat di class Model
     * ● Seperti $table, $primaryKey, $keyType, $incrementing dan lain-lain
     * ● https://laravel.com/api/10.x/Illuminate/Database/Eloquent/Model.html
     *
     * Timestamp
     * ● Secara default, Eloquent berharap terdapat kolom created_at dan updated_at sebagai informasi
     *   audit timestamp
     * ● Jika memang tidak membutuhkan informasi tersebut, kita bisa meng-override $timestamp menjadi
     *   false di Model
     *
     * Composite Primary Key
     * ● Sampai materi ini dibuat, sayangnya Laravel Eloquent tidak mendukung Composite Primary Key
     *   (primary key untuk lebih dari satu kolom)
     * ● Oleh karena itu, kita harus membuat satu kolom yang unique untuk primary key
     * ● Jika memang butuh composite key, kita bisa membuat dua kolom dengan index unique
     */

    protected $table = 'categories'; // $table // deskripsi binding nama model pada nama table
    protected $primaryKey = 'id'; // $primaryKey // deskripsi binding nama column primarykey pada table
    protected $keyType = 'string'; // $keyType // deskripsi type data nama column primarykey
    public $incrementing = false; // $incrementing // deskripsi jika id type int / bigInt maka yang akan autoincrement pada table. default model laravel adalah true
    public $timestamps = false; // $timestamps adalah fitur laravel akan auto generate auto_create dan auto_update // default model laravel adalah true

    // $fillable adalah supaya allow Request $request masuk dari http request dan web request. tanpa harus binding data attribute model/entity dan request key
    // jadi ini bisa mempercepat pekerjaan di laravel
    protected $fillable = [
        "id",
        "name",
        "description",
    ];

    // Attribute Casting fitur laravel eloquent
    // ini akan otomatis casting ke type data php
    // key adalah colum yang ada di table
    // value adalah type_data casting apa yang di inginkan
    protected $casts = [
        // format character: U	= Detik sejak the Unix Epoch (January 1 1970 00:00:00 GMT)	lihat juga time()
        "created_at" => 'datetime:U', // ingin casting dari data timetamps ke milisecond Detik sejak Unix Epoch
    ];

    // register query global scope
    protected static function booted(): void
    {
        parent::booted(); // TODO: Change the autogenerated stub
        self::addGlobalScope(new IsActiveScope()); // addGlobalScope($scope, $implementation = null) // addGlobalScope.. register global scope yang sudah dibuat pada model/entity ini
    }

    // buat method untuk relasi categories 1 ~ Many ke table products
    // dimana return value method HasMany (Punya banyak), menentukan memiliki relasi banyak
    // nama method bebas
    public function products(): HasMany{
        // hasMany($related, $foreignKey = null, $localKey = null)
        // $related:    Product::class // model/entity yang berelasi
        // $foreignKey: category_id (FK) di table products
        // $localKey:   id PK dari table "categories"
        return $this->hasMany(Product::class, 'category_id', "id"); // CONSTRAINT `products_category_id_foreign` FOREIGN KEY (`category_id`) REFERENCES `categories` (`id`)
    }

    // "Has One of Many" digunakan untuk mengambil salah satu data sesuai kondisi, dari relasi 1 ~ Many
    // return value method 'HasOne'
    public function cheapestProduct(): HasOne
    {
        return $this->hasOne(Product::class, "category_id", "id")->oldest("price"); // oldest() akan order by `price` asc limit 1
    }

    public function mostExpensiveProducts(): HasOne
    {
        return $this->hasOne(Product::class, "category_id", "id")->latest("price"); // oldest() akan order by `price` desc limit 1
    }

    // Has Many Through (memiliki Banyak Melalui)
    // skema relasi "categories" one to many "products" one to many "reviews"
    // secara tidak langsung categories punya relasi ke reviews dari products
    // jadi ingin langsung saja data dari categories query yang ada di reviews tanpa harus lewat products.. di sebut Has Many Through
    public function reviews(): HasManyThrough
    {
        return $this->hasManyThrough(
            Review::class, // table reviews yang langsung relasi table categories
            Product::class, // table products yang di lewati
            "category_id",  // FK on products table
            "product_id", // FK on reviews table
            "id", // PK on categories table
            "id" // PK on products table
        );
    }

}
